<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.joonzis.mapper.UserMapper">
	 
	 <resultMap id="userInfoMap" type="org.joonzis.domain.UserInfoDTO">
	    <result column="user_no" property="user_no"/>
	    <result column="user_rank" property="user_rank"/>
	    <result column="user_nick" property="user_nick"/>
	    
	    <result column="USER_PROFILE_IMG" property="user_profile_img"/>
	    <result column="IMAGE_FILE_NAME"  property="imageFileName"/>
	    <result column="USER_PROFILE_IMG" property="user_profile_img"/>
	    <result column="BOUNDARY_ITEM_NO" property="boundaryItemNo"/>
	    <result column="TITLE_ITEM_NO" property="titleItemNo"/>
	    <result column="FONTCOLOR_ITEM_NO" property="fontcolorItemNo"/>
	    <result column="BACKGROUND_ITEM_NO" property="backgroundItemNo"/>
	    <result column="BALLOON_ITEM_NO" property="balloonItemNo"/>
	</resultMap>

	 <!-- Top 10 유저 랭킹 목록 -->
	<select id="getUserRankingList" resultMap="userInfoMap">
	    <![CDATA[
	        SELECT *
			FROM (
			  SELECT 
			    U.USER_NO AS user_no,
			    U.USER_RANK AS user_rank,
			    U.USER_NICK AS user_nick,
			    COALESCE(D.BOUNDARY_ITEM_NO, 0) AS BOUNDARY_ITEM_NO,
			    COALESCE(D.TITLE_ITEM_NO, 0) AS TITLE_ITEM_NO,
			    COALESCE(D.FONTCOLOR_ITEM_NO, 0) AS FONTCOLOR_ITEM_NO,
			    COALESCE(D.BACKGROUND_ITEM_NO, 0) AS BACKGROUND_ITEM_NO,
			    COALESCE(D.BALLOON_ITEM_NO, 0) AS balloonItemNo
			  FROM USERS U
			  LEFT JOIN USER_DECO D ON U.USER_NO = D.USER_NO
			  ORDER BY U.USER_RANK DESC
			)
			WHERE ROWNUM <= 10
	    ]]>
	</select>
	
	<!-- 모든 아이템 목록 -->
	<select id="getItemList" resultType="org.joonzis.domain.ItemVO">
		SELECT 
			ITEM_NO            AS item_no,
	    	ITEM_NAME          AS item_name,
	    	ITEM_PRICE         AS item_price,
	    	ITEM_TYPE          AS item_type,
	    	IMAGE_FILE_NAME    AS imageFileName,
	    	CSS_CLASS_NAME	   AS css_class_name
		FROM ITEMS
	</select>
	<!-- 인벤토리 - 카테고리별 아이템 목록 -->
	<select id="getInventoryCategory" parameterType="map" resultType="org.joonzis.domain.ItemVO">
	    SELECT DISTINCT
	      i.ITEM_NO          AS item_no,
	      i.ITEM_PRICE       AS item_price,
	      i.ITEM_NAME        AS item_name,
	      i.ITEM_TYPE        AS item_type,
	      i.IMAGE_FILE_NAME  AS imageFileName,
	      i.CSS_CLASS_NAME AS css_class_name
	    FROM INVENTORY inv
	    JOIN ITEMS     i
	      ON inv.ITEM_NAME = i.ITEM_NAME
	     AND inv.ITEM_TYPE = i.ITEM_TYPE
	    WHERE inv.USER_NO   = #{user_no}
	      AND inv.ITEM_TYPE = #{category}
  	</select>
	<!-- 보유 아이템 목록 -->
	<select id="getInventory" resultType="org.joonzis.domain.ItemVO">
		SELECT ITEM_NAME
		FROM INVENTORY
		WHERE USER_NO = #{user_no}
	</select>

	<!-- 유저 장식 업데이트 -->
	<update id="updateItem" parameterType="org.joonzis.domain.UserDecoUpdateDTO">
		UPDATE USER_DECO
	    <set>
	      <choose>
	        <when test="item_type == 'boundary'">
	          BOUNDARY_ITEM_NO  = #{item_no, jdbcType=INTEGER}
	        </when>
	        <when test="item_type == 'title'">
	          TITLE_ITEM_NO     = #{item_no, jdbcType=INTEGER}
	        </when>
	        <when test="item_type == 'fontColor'">
	          FONTCOLOR_ITEM_NO = #{item_no, jdbcType=INTEGER}
	        </when>
	        <when test="item_type == 'background'">
	          BACKGROUND_ITEM_NO = #{item_no, jdbcType=INTEGER}
	        </when>
	        <when test="item_type == 'balloon'">
	          BALLOON_ITEM_NO   = #{item_no, jdbcType=INTEGER}
	        </when>
	        <when test="item_no == 103">
	          FONTCOLOR_ITEM_NO = #{item_no, jdbcType=INTEGER}
	        </when>
	        <when test="item_no == 110">
	          TITLE_ITEM_NO = #{item_no, jdbcType=INTEGER}
	        </when>
	        <when test="item_no == 119">
	        	BACKGROUND_ITEM_NO = #{item_no, jdbcType=INTEGER}
	        </when>
	        <when test="item_no == 118">
	        	BOUNDARY_ITEM_NO = #{item_no, jdbcType=INTEGER}
	        </when>
	      </choose>
	    </set>
	    WHERE USER_NO = #{user_no}
  </update>
	
	<!-- userNo로 유저 정보+css 찾기	 -->
	<select id="getUserInfoByUserNo" parameterType="int" resultMap="userInfoMap">
		SELECT
		  U.*,
		  D.*,
		  I.IMAGE_FILE_NAME
		FROM USERS U
		LEFT JOIN USER_DECO D  ON U.USER_NO = D.USER_NO
		LEFT JOIN ITEMS   I  ON D.BOUNDARY_ITEM_NO = I.ITEM_NO
		WHERE U.USER_NO = #{user_no}
	</select>
	
	<!-- 업적 달성 - 포인트 추가 -->
	<update id="updateUserPoint" parameterType="org.joonzis.domain.AchievementDTO">
		UPDATE USERS
	    SET USER_POINT = USER_POINT + #{ach_reward}
	    WHERE USER_NO = #{user_no}
	</update>
	
	
	<!-- 아이템 구매 - 포인트 감소 -->
	<update id="userPointMinus">
		UPDATE USERS
		SET USER_POINT = USER_POINT - #{item_price}
		WHERE USER_NO = #{user_no}
	</update>
	<!-- 아이템 구매 - 인벤토리에 추가 -->
	<insert id="buyItemInventory">
		INSERT INTO INVENTORY (USER_NO, CSS_CLASS_NAME, ITEM_NAME, ITEM_TYPE)
		VALUES (#{user_no}, #{css_class_name}, #{item_name}, #{item_type})
	</insert>
	
	<!-- 리워드 상태 -->
	<select id="getRewardStatus" resultType="org.joonzis.domain.UserRewardVO">
		SELECT *
		FROM USER_REWARDS
		WHERE USER_NO = #{user_no}
	</select>
	<!-- 리워드 상태 업데이트 -->
	<update id="rewardUpdate" parameterType="org.joonzis.domain.UserRewardVO">
		UPDATE USER_REWARDS
		SET BOUNDARY = #{boundary},
			TITLE = #{title},
			FONTCOLOR = #{fontColor},
			BACKGROUND = #{background}
		WHERE USER_NO = #{user_no}	
	</update>
	<!-- 리워드 보상 획득 -->
	<insert id="addReward" parameterType="org.joonzis.domain.UserDecoUpdateDTO">
		INSERT INTO INVENTORY (USER_NO, CSS_CLASS_NAME, ITEM_NAME, ITEM_TYPE)
		VALUES (#{user_no}, #{css_class_name, jdbcType=VARCHAR}, #{item_name}, #{item_type})
	</insert>
	
	<!-- 회원가입 - 닉네임 중복 확인 -->
	<select id="isUserNickTaken" resultType="int" parameterType="String">
		SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
		  FROM USERS
		  WHERE USER_NICK = #{user_nick}
	</select>
	<!-- 회원가입 - 아이디 중복 확인 -->
	<select id="isUserIdTaken" resultType="int" parameterType="String">
		SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
		  FROM USERS
		  WHERE USER_ID = #{user_id}
	</select>
	<!-- 회원가입 - 이메일 중복 확인 -->
	<select id="isUserEmailTaken" resultType="int" parameterType="String">
		SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
		  FROM USERS
		  WHERE USER_EMAIL = #{user_email}
	</select>
	
	<!-- 아이디 찾기 -->
	<select id="findIdByEmail" resultType="String" parameterType="String">
		SELECT USER_ID FROM USERS WHERE USER_EMAIL = #{user_email}
	</select>
	<!-- 비밀번호 찾기 -->
	<select id="findUserByIdAndEmail" resultType="org.joonzis.domain.UserInfoDTO">
		SELECT * FROM USERS WHERE USER_EMAIL = #{user_email} AND USER_ID = #{user_id}
	</select>
	<!-- 비밀번호 찾기 - 비밀번호 변경 -->
	<update id="updatePassword" parameterType="org.joonzis.domain.UserInfoDTO">
		UPDATE USERS
		SET USER_PW = #{user_pw}
		WHERE USER_ID = #{user_id} AND USER_EMAIL = #{user_email}
	</update>
	
	<!-- 유저 닉네임 변경 -->
	<update id="updateNickname">
	    UPDATE USERS
	    SET USER_NICK = #{user_nick},
	    	USER_POINT = USER_POINT - 5000
	    WHERE USER_NO = #{user_no}
	</update>
	
	<!-- 유저프로필이미지선택 -->
	<update id="updateProfileImage" parameterType="map">
	    UPDATE users
	      SET user_profile_img = #{imageUrl}
	    WHERE user_no = #{userNo}
	</update>
	
	<!-- VO용 조회 쿼리 -->
	<select id="getUsersByUserNo" parameterType="int" resultType="org.joonzis.domain.UsersVO">
	    SELECT 
	      user_no,
	      user_id,
	      user_nick,
	      user_email,
	      user_rank,
	      user_point,
	      user_profile_img
	    FROM users
	    WHERE user_no = #{userNo}
	</select>

	<!-- 비밀번호 변경 - 임시 토큰 생성 -->
	<insert id="insertResetToken">
	    INSERT INTO password_reset_token (id, user_id, token, expiry_date)
	    VALUES (seq_password_reset_token.NEXTVAL, #{userId}, #{token}, #{expiryDate, jdbcType=TIMESTAMP})
	</insert>
	<!-- 비밀번호 변경 - 토큰으로 유저 정보 찾기 -->
	<select id="findUserByToken" resultType="org.joonzis.domain.UserInfoDTO">
	    SELECT u.* FROM users u
	    JOIN password_reset_token t ON u.user_id = t.user_id
	    WHERE t.token = #{token}
	</select>
	<!-- 토큰 유효기간 비교 -->
	<select id="getExpiryByToken" resultType="java.time.LocalDateTime">
	    SELECT expiry_date FROM password_reset_token WHERE token = #{token}
	</select>
	<!-- 비밀번호 변경 성공 후 토큰 삭제 -->
	<delete id="deleteToken">
	    DELETE FROM password_reset_token WHERE token = #{token}
	</delete>
	
	<!-- 회원가입 -->
	<insert id="insertMember" parameterType="org.joonzis.domain.UsersVO">
		<selectKey keyProperty="user_no" resultType="int" order="BEFORE">
	        SELECT SEQ_USERS.NEXTVAL FROM dual
	    </selectKey>
	    BEGIN
			INSERT INTO USERS (USER_NO, USER_NICK, USER_ID, USER_PW, USER_EMAIL, USER_DATE, ISCHATBANNED)
			VALUES (#{user_no}, #{user_nick}, #{user_id}, #{user_pw}, #{user_email}, sysdate, 0);
			
			INSERT INTO INVENTORY VALUES(#{user_no}, 'white_fontColor', '하얀 글자', 'fontColor');
			INSERT INTO INVENTORY VALUES(#{user_no}, null, '기본 테두리', 'boundary');
			INSERT INTO INVENTORY VALUES(#{user_no}, null, '기본 말풍선', 'balloon');
			INSERT INTO INVENTORY VALUES(#{user_no}, null, '기본명함', 'background');
		END;
	</insert>
	<!-- 유저 데코,리워드에 추가 -->
	<insert id="insertDeco">
		INSERT INTO USER_DECO (USER_NO) VALUES (#{user_no})
	</insert>
	<insert id="insertReward">
		INSERT INTO USER_REWARDS (USER_NO) VALUES (#{user_no})
	</insert>
	
	<!-- 로그인 -->
	<select id="selectUserByIdAndPw" resultType="org.joonzis.domain.UserInfoDTO">
		SELECT *
		FROM users u
		JOIN user_deco d ON u.user_no = d.user_no
		WHERE u.user_id = #{user_id}
		  AND u.user_pw = #{user_pw}
    </select>
    
    <!-- 회원 포인트 조회 -->
    <select id="getUserPoint" resultType="long">
    	SELECT USER_POINT
    	FROM USERS
    	WHERE USER_ID = #{user_id}
    </select>
    
    <!-- 포인트 구매 -->
    <update id="updatePoint">
	    UPDATE users
	    SET user_point = user_point + #{amount}
	    WHERE user_id = #{userId}
	</update>
	
	<!-- 유저 정보 조회 -->
	<select id="getUserById" parameterType="String" resultType="org.joonzis.domain.UserInfoDTO">
		SELECT
			u.user_no,
			u.user_rank,
			u.user_play_count,
			u.user_1st_count,
			u.is_logged_in,
			u.user_point,
			u.user_nick,
			u.user_id,
			u.user_pw,
			u.user_email,
			u.user_date,
			u.ischatbanned,
			u.user_profile_img,
			u.auth,
			u.banned_timestamp,
			d.boundary_item_no as boundaryItemNo,
			d.title_item_no as titleItemNo,
			d.fontcolor_item_no as fontcolorItemNo,
			d.background_item_no as backgroundItemNo,
			d.balloon_item_no as balloonItemNo
		FROM users u
		JOIN user_deco d ON u.user_no = d.user_no
		WHERE u.user_id = #{user_id}
	</select>
	
	<!-- 전 체 유저 정답률 -->
	<select id="getUserAccuracyList" resultType="org.joonzis.domain.UserAccuracyDTO">
	    SELECT
	        USER_NICK AS userNick,
	        COUNT(*) AS totalCount,
	        SUM(TO_NUMBER(IS_CORRECT)) AS correctCount,
	        ROUND(
	            SUM(TO_NUMBER(IS_CORRECT)) / COUNT(*) * 100,
	            2
	        ) AS accuracyPct
	    FROM USER_QUESTION_HISTORY
	    WHERE USER_NICK = #{user_nick}
	    GROUP BY USER_NICK
	    ORDER BY accuracyPct DESC
	</select>
	
	<update id="clearUserStyle">
		UPDATE USER_DECO SET TITLE_ITEM_NO=null WHERE USER_NO = #{user_no} 
	</update>
	
	<select id="getRank" parameterType="int">
		SELECT USER_RANK FROM USERS WHERE USER_NICK = #{user_nick}
	</select>
	
</mapper>